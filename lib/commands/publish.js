/*
 * Copyright (c) 2015, Groupon, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of GROUPON nor the names of its contributors may be
 * used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
'use strict'; /* eslint no-console:0 */

const childProcess = require('child_process');
const fs = require('fs');
const path = require('path');

const Bluebird = require('bluebird');
const _ = require('lodash');

const detectBranch = require('../steps/detect-branch');

const execFileAsync = Bluebird.promisify(childProcess.execFile);

function generateNpmrc(registryUrl) {
  const configUrl = registryUrl
    .replace(/^https?:/, '') // remove protocol prefix
    .replace(/([^/])$/, '$1/'); // make sure the url ends with /

  return `; Generated by nlm
registry=${registryUrl}

; For registries that support OAuth tokens
; The remaining values will be ignored if NPM_TOKEN is set
${configUrl}:_authToken=$\{NPM_TOKEN}

; Old-style username/password integration
${configUrl}:_password=$\{NPM_PASSWORD_BASE64}
${configUrl}:username=$\{NPM_USERNAME}
${configUrl}:email=$\{NPM_EMAIL}
`;
}

function checkPublishRequired(cwd, pkg, options) {
  const distTag = options.distTag;
  if (!distTag || distTag === 'false') {
    return 'wrong-branch';
  }

  return execFileAsync('npm', [ 'show', pkg.name, '--json' ], { cwd })
    .then(content => {
      const registryState = JSON.parse(content);
      if (!_.includes(registryState.versions, pkg.version)) {
        return 'publish';
      }
      const distTagCurrent = registryState['dist-tags'][distTag];
      if (distTagCurrent !== pkg.version) {
        return 'dist-tag';
      }
      return 'none';
    })
    .catch(error => {
      if (error.message.indexOf('ERR! 404') !== -1) {
        return 'publish';
      }
      throw error;
    });
}

function getCurrentCommit(cwd) {
  return execFileAsync('git', [ 'log', '--format=%s', '--max-count=1' ], { cwd })
    .then(stdout => stdout.trim());
}

function doPublish(cwd, pkg, options) {
  if (!options.commit) {
    console.log('[nlm] Version %s needs publishing', pkg.version);
    return null;
  }
  return execFileAsync('npm', [
    'publish', '--tag', options.distTag,
  ], { cwd }).then(stdout => process.stdout.write(stdout));
}

function updateDistTag(cwd, pkg, options) {
  if (!options.commit) {
    console.log('[nlm] Set dist-tag %s to %s', options.distTag, pkg.version);
    return null;
  }
  return execFileAsync('npm', [
    'dist-tag', 'add', `${pkg.name}@${pkg.version}`, options.distTag,
  ], { cwd }).then(stdout => process.stdout.write(stdout));
}

function publishToNPM(cwd, pkg, options) {
  process.env.NPM_TOKEN = process.env.NPM_TOKEN || '';
  process.env.NPM_PASSWORD_BASE64 = process.env.NPM_PASSWORD_BASE64 || '';
  process.env.NPM_USERNAME = process.env.NPM_USERNAME || '';
  process.env.NPM_EMAIL = process.env.NPM_EMAIL || '';

  const rcFile = path.join(cwd, '.npmrc');
  const rcContent = generateNpmrc(pkg.publishConfig.registry);
  fs.writeFileSync(rcFile, rcContent);

  return detectBranch(cwd, pkg, options)
    .then(() => Bluebird.all([
      checkPublishRequired(cwd, pkg, options),
      getCurrentCommit(cwd),
    ]))
    .spread((publishRequired, currentCommit) => {
      if (currentCommit !== `v${pkg.version}`) {
        console.log('[nlm] Skipping publish, not a version commit:', currentCommit);
        return null;
      }

      switch (publishRequired) {
      case 'dist-tag':
        return updateDistTag(cwd, pkg, options);

      case 'publish':
        return doPublish(cwd, pkg, options);

      case 'wrong-branch':
        console.log('[nlm] No release channel for branch %j',
          options.currentBranch);
        return null;

      default:
        console.log('[nlm] Version %s already exists', pkg.version);
        return null;
      }
    })
    .finally(() => {
      fs.unlinkSync(rcFile);
    })
    .done();
}
module.exports = publishToNPM;
